{"version":3,"sources":["utils/fn_helpers.js","components/IssueList.js","components/TableHeader.js","components/Table.js","components/Spinner.js","Containers/Main.js","Containers/Error.js","Containers/App.js","serviceWorker.js","index.js"],"names":["computeRows","issues","map","issue","number","title","created_at","updated_at","labels","state","react_default","a","createElement","Table","Row","key","Cell","textAlign","className","href","html_url","target","rel","computeDay","List","as","label","Item","id","name","computeLabels","iso","Date","toLocaleDateString","year","month","day","IssueList","_ref","Body","TableHeader","Header","HeaderCell","singleLine","TableComponent","definition","compact","celled","components_TableHeader","components_IssueList","Spinner","Loader","active","inline","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchData","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","fetch","sent","json","setState","t0","error","stop","_x","apply","arguments","_this$state","Grid","centered","columns","Column","length","components_Table","Component","ErrorBoundary","errorInfo","console","log","style","whiteSpace","toString","componentStack","children","App","Error","Containers_Main","Boolean","window","location","hostname","match","ReactDOM","render","Containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8e6fc69.chunk.js","sourcesContent":["import React from 'react';\nimport { Table, List } from 'semantic-ui-react';\n\nexport default function computeRows(issues) {\n  return issues.map(issue => {\n    const {\n      number,\n      title,\n      created_at,\n      updated_at,\n      labels,\n      state\n    } = issue;\n\n    return (\n      <Table.Row key={number}>\n        <Table.Cell textAlign=\"center\" className=\"issue-nr\">\n          {number}\n        </Table.Cell>\n        <Table.Cell >\n          <a href={issue.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {title}\n          </a>\n        </Table.Cell>\n        <Table.Cell>{computeDay(created_at)}</Table.Cell>\n        <Table.Cell>{computeDay(updated_at)}</Table.Cell>\n        <Table.Cell textAlign=\"left\">\n          <List as=\"ul\">{computeLabels(labels)}</List>\n        </Table.Cell>\n        <Table.Cell>{state}</Table.Cell>\n      </Table.Row>\n    );\n  });\n}\n\nfunction computeLabels(labels) {\n  return labels.map(label => (\n    <List.Item key={label.id} as=\"li\">\n      {label.name}\n    </List.Item>\n  ));\n}\n\nfunction computeDay(iso) {\n  let dateFromIso = new Date(iso);\n  return dateFromIso.toLocaleDateString(\"en-US\", { year: 'numeric', month: 'short', day: 'numeric' });\n}\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport computeRows from '../utils/fn_helpers';\n\nconst IssueList = ({ issues }) => {\n  return <Table.Body>{computeRows(issues)}</Table.Body>;\n};\n\n\nexport default IssueList;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\n\nconst TableHeader = () => {\n  return (\n    <Table.Header>\n      <Table.Row>\n        <Table.HeaderCell singleLine>Issue Number</Table.HeaderCell>\n        <Table.HeaderCell>Title</Table.HeaderCell>\n        <Table.HeaderCell>Created At</Table.HeaderCell>\n        <Table.HeaderCell>Updated At</Table.HeaderCell>\n        <Table.HeaderCell>Labels</Table.HeaderCell>\n        <Table.HeaderCell>State</Table.HeaderCell>\n      </Table.Row>\n    </Table.Header>\n  );\n};\n\nexport default TableHeader;\n","import React from 'react';\nimport IssueList from './IssueList';\nimport TableHeader from \"./TableHeader\";\nimport { Table } from 'semantic-ui-react';\n\nconst TableComponent = ({ issues }) => {\n  return (\n    <Table definition compact celled>\n      <TableHeader />\n      <IssueList issues={issues} />\n    </Table>\n  );\n};\n\nexport default TableComponent;\n","import React from 'react';\nimport { Loader } from 'semantic-ui-react';\n\nexport default () => <Loader className=\"spinner\" active inline='centered' />\n","import React, { Component } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport TableComponent from '../components/Table';\nimport Spinner from '../components/Spinner';\nimport 'semantic-ui-css/semantic.min.css';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { issues: [], error: null };\n  }\n\n  componentDidMount() {\n    const url = 'https://ai.github.com/repos/facebook/react/isues';\n    this.fetchData(url);\n  }\n\n  fetchData = async url => {\n    try {\n      let issues = await (await fetch(url)).json();\n      this.setState({ issues });\n    } catch (error) {\n      this.setState({error})\n    }\n  };\n\n  render() {\n    const { issues, error } = this.state;\n    if(!error)\n    return (\n      <Grid centered columns={1}>\n        <Grid.Column>\n          {issues.length ? <TableComponent issues={issues} /> : <Spinner />}\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { error: true };\n  }\n\n\n  render() {\n    console.log(this.state)\n\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div>\n          <h2>Something went wrong.</h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n  componentDidCatch(error, errorInfo) {\n\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n    // You can also log error messages to an error reporting service here\n  }\n\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport Main from './Main';\nimport ErrorBoundary from './Error';\n\nclass App extends Component {\n  render() {\n    return (\n    <ErrorBoundary>\n      <Main />\n    </ErrorBoundary>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}