{"version":3,"sources":["utils/fn_helpers.js","components/RowList.js","components/TableHeader.js","components/Spinner.js","components/Main.js","containers/HOCs/gh-fetch.js","containers/Error.js","containers/App.js","serviceWorker.js","index.js"],"names":["fn_helpers","fetchedData","fields","reduce","acc","curr","i","arr","map","push","computeDay","react_default","a","createElement","Table","Row","key","number","Object","values","y","TableCell","Array","isArray","List","id","as","name","Item","iso","Date","toLocaleDateString","year","month","day","RowList","_ref","data","console","log","Body","computeRows","TableHeader","Header","field","HeaderCell","Spinner","Loader","className","active","inline","Main","WrappedComponent","what","url","row","_Component","_class2","props","_this$state","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchData","asyncToGenerator","regenerator_default","mark","_callee","result","wrap","_context","prev","next","fetch","sent","json","setState","defineProperty","t0","error","stop","_x","apply","arguments","state","inherits","createClass","value","assign","Component","withGH","Grid","centered","columns","Column","definition","compact","celled","components_TableHeader","components_RowList","ErrorBoundary","hasError","errorInfo","componentStack","children","App","Error","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7eed5e57.chunk.js","sourcesContent":["import React from 'react';\nimport { Table, List, TableCell } from 'semantic-ui-react';\n\nexport default computeRows;\nexport { logErrorToService };\n\nfunction computeRows(fetchedData, fields) {\n  // reduce fetchedData to contain just the values from the fields array\n  let reducedArr = fetchedData.reduce((acc, curr, i) => {\n    let arr = {};\n    fields.map(i => {\n      if (i in curr) arr[i] = curr[i];\n      return null;\n    });\n    acc.push(arr);\n    return acc;\n  }, []);\n\n  return reducedArr.map(i => {\n    if (i['created_at']) i['created_at'] = computeDay(i['created_at']);\n    if (i['updated_at']) i['updated_at'] = computeDay(i['updated_at']);\n    return (\n      <Table.Row key={i.number}>\n        {Object.values(i).map((y, i) => {\n          return (\n            <TableCell key={i}>\n              {Array.isArray(y)\n                ? y.map(i => (\n                    <List key={i.id} as=\"ul\">\n                      {computeItem(i.name)}\n                    </List>\n                  ))\n                : y}\n            </TableCell>\n          );\n        })}\n      </Table.Row>\n    );\n  });\n}\n\nfunction computeItem(name) {\n  return <List.Item as=\"li\">{name}</List.Item>;\n}\n\nfunction computeDay(iso) {\n  let dateFromIso = new Date(iso);\n  return dateFromIso.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n}\n\nfunction logErrorToService(error, errorInfo) {\n  // send the exceptions to your error service provider\n}\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport computeRows from '../utils/fn_helpers';\n\nconst RowList = ({ data, fields }) => {\n  console.log(data, fields);\n  return <Table.Body>{computeRows(data, fields)}</Table.Body>;\n};\n\nexport default RowList;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\n\nconst TableHeader = ({ fields }) => {\n  return (\n    <Table.Header>\n      <Table.Row>\n        {fields.map((field, i) => (\n          // safe to use `i` as key because we control the fields array\n          <Table.HeaderCell key={i}>{field}</Table.HeaderCell>\n        ))}\n      </Table.Row>\n    </Table.Header>\n  );\n};\n\nexport default TableHeader;\n","import React from 'react';\nimport { Loader } from 'semantic-ui-react';\n\nexport default () => <Loader className=\"spinner\" active inline=\"centered\" />;\n","import React from 'react';\nimport { Grid, Table } from 'semantic-ui-react';\nimport RowList from './RowList';\nimport TableHeader from './TableHeader';\nimport Spinner from './Spinner';\nimport withGH from '../containers/HOCs/gh-fetch';\n\nconst rowFields = [\n  'Issue Nr',\n  'Title',\n  'Created At',\n  'Updated At',\n  'Labels',\n  'State'\n];\n\nconst ghFields = [\n  'number',\n  'title',\n  'created_at',\n  'updated_at',\n  'labels',\n  'state'\n];\n\n// const rowFields1 = [\n//   'id',\n//   'name',\n//   'Created At',\n//   'Updated At',\n//   'git_url',\n//   'language'\n// ];\n// const ghFields1 = [\n//   'id',\n//   'name',\n//   'created_at',\n//   'updated_at',\n//   'git_url',\n//   'language'\n// ];\n\nlet url = 'https://api.github.com/repos/facebook/react/issues';\nlet user_repos_url = 'https://api.github.com/users/ysrg/repos'; // eslint-disable-line no-unused-vars\n\nfunction buildMain({ data, data: { error }, name, row, fields }) {\n  if (!error)\n    return (\n      <Grid centered columns={1}>\n        <Grid.Column>\n          {data[name] ? (\n            <Table definition compact celled>\n              <TableHeader fields={row} />\n              <RowList fields={fields} data={data[name]} />\n            </Table>\n          ) : (\n            <Spinner />\n          )}\n        </Grid.Column>\n      </Grid>\n    );\n}\n\n/**\n * You can pass as arguments what specific data you want to retrieve and build the table with\n * @param buildMain = function/Class  <Component/>\n * @param rowFields = []\n * @param ghFields = []\n * @param url = String\n */\nconst Main = withGH(buildMain, 'issues', url, rowFields, ghFields);\n\nexport default Main;\n","import React, { Component } from 'react';\n\nexport default fetchGH;\n\nfunction fetchGH(WrappedComponent, what, url, row, fields) {\n  return class extends Component {\n    constructor(props) {\n      super(props);\n      this.state = { [what]: null, error: null };\n    }\n\n    componentDidMount() {\n      this.fetchData(url);\n    }\n\n    fetchData = async url => {\n      try {\n        let result = await (await fetch(url)).json();\n        this.setState({ [what]: result });\n      } catch (error) {\n        this.setState({ error });\n      }\n    };\n\n    render() {\n      // renders the wrapped component with new data\n      // also, we pass through any additional props\n      return (\n        <WrappedComponent\n          data={this.state}\n          name={what}\n          row={row}\n          fields={fields}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n","import React, { Component } from 'react';\nimport { logErrorToService } from '../utils/fn_helpers';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    logErrorToService(error, errorInfo.componentStack);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        // We can render any fallback component here\n        <div>\n          <h4>Something went wrong while fetching your resource. Try again later.</h4>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport Main from '../components/Main';\nimport ErrorBoundary from './Error';\n\nclass App extends Component {\n  render() {\n    return (\n      <ErrorBoundary>\n        <Main />\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nimport './styles/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}